import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';
import { Badge } from '../components/ui/badge';
import { Button } from '../components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '../components/ui/avatar';
import { Progress } from '../components/ui/progress';
import {
  Star,
  Quote,
  ThumbsUp,
  MessageSquare,
  Users,
  Award,
  TrendingUp,
  MapPin,
  Calendar,
  Camera,
  Heart,
  Share2,
  ChevronLeft,
  ChevronRight,
  Play,
  CheckCircle,
  Verified,
} from 'lucide-react';

interface Review {
  id: number;
  user: {
    name: string;
    avatar: string;
    location: string;
    verified: boolean;
    reviewCount: number;
    memberSince: string;
  };
  rating: number;
  title: string;
  content: string;
  date: string;
  service: 'flight' | 'tour' | 'bus';
  serviceName: string;
  helpful: number;
  images?: string[];
  hasVideo?: boolean;
  tags: string[];
  travelWith: string;
}

interface SocialProof {
  metric: string;
  value: string;
  icon: React.ComponentType<{ className?: string }>;
  description: string;
  trend: 'up' | 'down' | 'stable';
}

const reviews: Review[] = [
  {
    id: 1,
    user: {
      name: 'Nguy·ªÖn Minh Anh',
      avatar: '/placeholder.svg',
      location: 'TP.HCM',
      verified: true,
      reviewCount: 47,
      memberSince: '2020',
    },
    rating: 5,
    title: 'Chuy·∫øn bay tuy·ªát v·ªùi, d·ªãch v·ª• ho√†n h·∫£o!',
    content: 'T√¥i ƒë√£ ƒë·∫∑t v√© m√°y bay qua MegaTrip v√† ho√†n to√†n h√†i l√≤ng. Quy tr√¨nh ƒë·∫∑t v√© nhanh ch√≥ng, gi√° c·∫£ c·∫°nh tranh v√† h·ªó tr·ª£ kh√°ch h√†ng r·∫•t nhi·ªát t√¨nh. Chuy·∫øn bay ƒë√∫ng gi·ªù, phi h√†nh ƒëo√†n th√¢n thi·ªán. Ch·∫Øc ch·∫Øn s·∫Ω s·ª≠ d·ª•ng l·∫°i d·ªãch v·ª• n√†y.',
    date: '2024-12-25',
    service: 'flight',
    serviceName: 'VN1546 TP.HCM - H√† N·ªôi',
    helpful: 23,
    images: ['/placeholder.svg', '/placeholder.svg'],
    tags: ['ƒê√∫ng gi·ªù', 'Gi√° t·ªët', 'D·ªãch v·ª• t·ªët'],
    travelWith: 'Gia ƒë√¨nh',
  },
  {
    id: 2,
    user: {
      name: 'Tr·∫ßn Ho√†ng Nam',
      avatar: '/placeholder.svg',
      location: 'H√† N·ªôi',
      verified: true,
      reviewCount: 23,
      memberSince: '2021',
    },
    rating: 5,
    title: 'Tour ƒê√† N·∫µng - H·ªôi An tuy·ªát v·ªùi!',
    content: 'Tour 3N2ƒê ƒê√† N·∫µng - H·ªôi An th·∫≠t s·ª± tuy·ªát v·ªùi. L·ªãch tr√¨nh h·ª£p l√Ω, h∆∞·ªõng d·∫´n vi√™n nhi·ªát t√¨nh v√† am hi·ªÉu. Kh√°ch s·∫°n s·∫°ch s·∫Ω, ƒÉn u·ªëng ngon. ƒê·∫∑c bi·ªát l√† ƒë∆∞·ª£c tr·∫£i nghi·ªám C·∫ßu V√†ng B√† N√† Hills v√† ph·ªë c·ªï H·ªôi An v·ªÅ ƒë√™m r·∫•t l√£ng m·∫°n. C·∫£m ∆°n MegaTrip!',
    date: '2024-12-20',
    service: 'tour',
    serviceName: 'Tour ƒê√† N·∫µng - H·ªôi An 3N2ƒê',
    helpful: 31,
    hasVideo: true,
    images: ['/placeholder.svg', '/placeholder.svg', '/placeholder.svg'],
    tags: ['HDV t·ªët', 'L·ªãch tr√¨nh hay', 'ƒê√°ng ti·ªÅn'],
    travelWith: 'B·∫°n b√®',
  },
  {
    id: 3,
    user: {
      name: 'L√™ Th·ªã H∆∞∆°ng',
      avatar: '/placeholder.svg',
      location: 'ƒê√† N·∫µng',
      verified: false,
      reviewCount: 8,
      memberSince: '2023',
    },
    rating: 4,
    title: 'Xe gi∆∞·ªùng n·∫±m tho·∫£i m√°i',
    content: 'ƒê·∫∑t xe TP.HCM - ƒê√† L·∫°t qua MegaTrip. Xe s·∫°ch s·∫Ω, gi∆∞·ªùng n·∫±m tho·∫£i m√°i, c√≥ wifi v√† n∆∞·ªõc mi·ªÖn ph√≠. T√†i x·∫ø l√°i xe an to√†n. Tuy nhi√™n xe kh·ªüi h√†nh h∆°i tr·ªÖ 15 ph√∫t so v·ªõi l·ªãch tr√¨nh. Nh√¨n chung v·∫´n h√†i l√≤ng v·ªõi d·ªãch v·ª•.',
    date: '2024-12-18',
    service: 'bus',
    serviceName: 'Ph∆∞∆°ng Trang TP.HCM - ƒê√† L·∫°t',
    helpful: 15,
    tags: ['Tho·∫£i m√°i', 'S·∫°ch s·∫Ω', 'An to√†n'],
    travelWith: 'M·ªôt m√¨nh',
  },
  {
    id: 4,
    user: {
      name: 'Ph·∫°m VƒÉn ƒê·ª©c',
      avatar: '/placeholder.svg',
      location: 'C·∫ßn Th∆°',
      verified: true,
      reviewCount: 35,
      memberSince: '2019',
    },
    rating: 5,
    title: 'App r·∫•t ti·ªán l·ª£i, ƒë·∫∑t v√© nhanh',
    content: 'S·ª≠ d·ª•ng MegaTrip ƒë√£ 2 nƒÉm, r·∫•t h√†i l√≤ng. Giao di·ªán app d·ªÖ s·ª≠ d·ª•ng, th√¥ng tin r√µ r√†ng, thanh to√°n an to√†n. M·ªói l·∫ßn ƒë·∫∑t v√© ƒë·ªÅu nh·∫≠n ƒë∆∞·ª£c x√°c nh·∫≠n nhanh ch√≥ng. Team h·ªó tr·ª£ ph·∫£n h·ªìi nhanh khi c√≥ th·∫Øc m·∫Øc. ƒê√£ gi·ªõi thi·ªáu cho nhi·ªÅu b·∫°n b√®.',
    date: '2024-12-15',
    service: 'flight',
    serviceName: 'Jetstar TP.HCM - ƒê√† N·∫µng',
    helpful: 42,
    tags: ['App t·ªët', 'H·ªó tr·ª£ nhanh', 'Tin c·∫≠y'],
    travelWith: 'C√¥ng vi·ªác',
  },
];

const socialProofMetrics: SocialProof[] = [
  {
    metric: 'Kh√°ch h√†ng h√†i l√≤ng',
    value: '98.7%',
    icon: Star,
    description: 'T·ª´ h∆°n 250,000 ƒë√°nh gi√°',
    trend: 'up',
  },
  {
    metric: 'ƒê√°nh gi√° 5 sao',
    value: '94.2%',
    icon: ThumbsUp,
    description: 'Tr√™n t·ªïng s·ªë ƒë√°nh gi√°',
    trend: 'up',
  },
  {
    metric: 'T·ª∑ l·ªá ƒë·∫∑t l·∫°i',
    value: '87%',
    icon: Users,
    description: 'Kh√°ch h√†ng quay l·∫°i s·ª≠ d·ª•ng',
    trend: 'stable',
  },
  {
    metric: 'Ph·∫£n h·ªìi t√≠ch c·ª±c',
    value: '99.1%',
    icon: MessageSquare,
    description: 'V·ªÅ ch·∫•t l∆∞·ª£ng d·ªãch v·ª•',
    trend: 'up',
  },
];

const topReviewers = [
  {
    name: 'Nguy·ªÖn Travel Expert',
    avatar: '/placeholder.svg',
    reviews: 127,
    helpfulVotes: 1540,
    badge: 'Top Reviewer',
    location: 'TP.HCM',
  },
  {
    name: 'Minh Adventure',
    avatar: '/placeholder.svg',
    reviews: 89,
    helpfulVotes: 890,
    badge: 'Travel Guide',
    location: 'H√† N·ªôi',
  },
  {
    name: 'Linh Wanderlust',
    avatar: '/placeholder.svg',
    reviews: 76,
    helpfulVotes: 645,
    badge: 'Explorer',
    location: 'ƒê√† N·∫µng',
  },
];

export default function ReviewsSection() {
  const [currentReview, setCurrentReview] = useState(0);
  const [filter, setFilter] = useState('all');

  const filteredReviews = reviews.filter(review => 
    filter === 'all' || review.service === filter
  );

  const averageRating = reviews.reduce((sum, review) => sum + review.rating, 0) / reviews.length;

  const ratingDistribution = [5, 4, 3, 2, 1].map(rating => ({
    rating,
    count: reviews.filter(r => r.rating === rating).length,
    percentage: (reviews.filter(r => r.rating === rating).length / reviews.length) * 100
  }));

  const nextReview = () => {
    setCurrentReview((prev) => (prev + 1) % filteredReviews.length);
  };

  const prevReview = () => {
    setCurrentReview((prev) => (prev - 1 + filteredReviews.length) % filteredReviews.length);
  };

  const getServiceIcon = (service: string) => {
    switch (service) {
      case 'flight': return '‚úàÔ∏è';
      case 'tour': return 'üó∫Ô∏è';
      case 'bus': return 'üöå';
      default: return '‚≠ê';
    }
  };

  const renderStars = (rating: number, size: 'sm' | 'lg' = 'sm') => {
    const starSize = size === 'lg' ? 'h-5 w-5' : 'h-4 w-4';
    return Array.from({ length: 5 }).map((_, index) => (
      <Star
        key={index}
        className={`${starSize} ${
          index < rating ? 'text-yellow-400 fill-yellow-400' : 'text-gray-300'
        }`}
      />
    ));
  };

  return (
    <section className="py-16 bg-gradient-to-br from-gray-50 to-blue-50">
      <div className="container">
        {/* Section Header */}
        <div className="text-center mb-12">
          <Badge className="mb-4 bg-blue-100 text-blue-800">
            <Star className="h-3 w-3 mr-1" />
            ƒê√°nh gi√° t·ª´ kh√°ch h√†ng
          </Badge>
          <h2 className="text-3xl lg:text-4xl font-bold mb-4">
            Tr·∫£i nghi·ªám th·ª±c t·∫ø t·ª´ kh√°ch h√†ng
          </h2>
          <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
            H∆°n 250,000 ƒë√°nh gi√° ch√¢n th·ª±c t·ª´ kh√°ch h√†ng ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•
          </p>
        </div>

        {/* Social Proof Metrics */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-12">
          {socialProofMetrics.map((metric, index) => (
            <Card key={index} className="text-center hover:shadow-lg transition-shadow">
              <CardContent className="p-6">
                <div className="flex justify-center mb-3">
                  <div className="p-3 bg-blue-100 rounded-full">
                    <metric.icon className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
                <div className="text-2xl font-bold text-[hsl(var(--primary))] mb-1">
                  {metric.value}
                </div>
                <div className="text-sm font-medium mb-1">{metric.metric}</div>
                <div className="text-xs text-muted-foreground">
                  {metric.description}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Review Summary */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Star className="h-5 w-5 text-yellow-400" />
                  T·ªïng quan ƒë√°nh gi√°
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center mb-6">
                  <div className="text-4xl font-bold mb-2">{averageRating.toFixed(1)}</div>
                  <div className="flex justify-center mb-2">
                    {renderStars(Math.round(averageRating), 'lg')}
                  </div>
                  <div className="text-sm text-muted-foreground">
                    T·ª´ {reviews.length.toLocaleString()} ƒë√°nh gi√°
                  </div>
                </div>
                
                <div className="space-y-3">
                  {ratingDistribution.map((dist) => (
                    <div key={dist.rating} className="flex items-center gap-3">
                      <div className="flex items-center gap-1 w-12">
                        <span className="text-sm">{dist.rating}</span>
                        <Star className="h-3 w-3 text-yellow-400" />
                      </div>
                      <Progress value={dist.percentage} className="flex-1" />
                      <span className="text-sm text-muted-foreground w-8">
                        {dist.count}
                      </span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Top Reviewers */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Award className="h-5 w-5 text-orange-500" />
                  Top Reviewers
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {topReviewers.map((reviewer, index) => (
                    <div key={index} className="flex items-center gap-3">
                      <Avatar className="h-10 w-10">
                        <AvatarImage src={reviewer.avatar} />
                        <AvatarFallback>{reviewer.name[0]}</AvatarFallback>
                      </Avatar>
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <span className="font-medium text-sm">{reviewer.name}</span>
                          <Badge variant="secondary" className="text-xs">
                            {reviewer.badge}
                          </Badge>
                        </div>
                        <div className="text-xs text-muted-foreground">
                          {reviewer.reviews} ƒë√°nh gi√° ‚Ä¢ {reviewer.helpfulVotes} h·ªØu √≠ch
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Reviews */}
          <div className="lg:col-span-2">
            {/* Filter Tabs */}
            <div className="flex items-center gap-2 mb-6">
              <Button
                variant={filter === 'all' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('all')}
              >
                T·∫•t c·∫£
              </Button>
              <Button
                variant={filter === 'flight' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('flight')}
              >
                ‚úàÔ∏è V√© m√°y bay
              </Button>
              <Button
                variant={filter === 'tour' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('tour')}
              >
                üó∫Ô∏è Tour
              </Button>
              <Button
                variant={filter === 'bus' ? 'default' : 'outline'}
                size="sm"
                onClick={() => setFilter('bus')}
              >
                üöå Xe du l·ªãch
              </Button>
            </div>

            {/* Featured Review Carousel */}
            <div className="relative mb-8">
              <Card className="overflow-hidden">
                <CardContent className="p-0">
                  {filteredReviews.length > 0 && (
                    <div className="p-6">
                      <div className="flex items-start gap-4 mb-4">
                        <Avatar className="h-12 w-12">
                          <AvatarImage src={filteredReviews[currentReview].user.avatar} />
                          <AvatarFallback>
                            {filteredReviews[currentReview].user.name[0]}
                          </AvatarFallback>
                        </Avatar>
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <span className="font-semibold">
                              {filteredReviews[currentReview].user.name}
                            </span>
                            {filteredReviews[currentReview].user.verified && (
                              <Verified className="h-4 w-4 text-blue-500" />
                            )}
                            <Badge variant="secondary" className="text-xs">
                              {filteredReviews[currentReview].user.reviewCount} ƒë√°nh gi√°
                            </Badge>
                          </div>
                          <div className="text-sm text-muted-foreground">
                            {filteredReviews[currentReview].user.location} ‚Ä¢ 
                            Th√†nh vi√™n t·ª´ {filteredReviews[currentReview].user.memberSince}
                          </div>
                        </div>
                        <div className="text-right">
                          <div className="flex items-center gap-1 mb-1">
                            {renderStars(filteredReviews[currentReview].rating)}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            {filteredReviews[currentReview].date}
                          </div>
                        </div>
                      </div>

                      <h3 className="font-semibold mb-2">
                        {filteredReviews[currentReview].title}
                      </h3>
                      
                      <p className="text-muted-foreground mb-4 leading-relaxed">
                        {filteredReviews[currentReview].content}
                      </p>

                      <div className="flex items-center gap-4 mb-4">
                        <Badge variant="outline" className="text-xs">
                          {getServiceIcon(filteredReviews[currentReview].service)}{' '}
                          {filteredReviews[currentReview].serviceName}
                        </Badge>
                        <span className="text-xs text-muted-foreground">
                          Du l·ªãch c√πng: {filteredReviews[currentReview].travelWith}
                        </span>
                      </div>

                      {/* Tags */}
                      <div className="flex flex-wrap gap-2 mb-4">
                        {filteredReviews[currentReview].tags.map((tag, index) => (
                          <Badge key={index} variant="secondary" className="text-xs">
                            {tag}
                          </Badge>
                        ))}
                      </div>

                      {/* Images */}
                      {filteredReviews[currentReview].images && (
                        <div className="flex gap-2 mb-4">
                          {filteredReviews[currentReview].images?.slice(0, 3).map((image, index) => (
                            <div
                              key={index}
                              className="relative w-20 h-20 rounded-lg overflow-hidden bg-gray-100"
                            >
                              <img
                                src={image}
                                alt="Review"
                                className="w-full h-full object-cover"
                              />
                              {index === 0 && filteredReviews[currentReview].hasVideo && (
                                <div className="absolute inset-0 flex items-center justify-center bg-black/50">
                                  <Play className="h-6 w-6 text-white" />
                                </div>
                              )}
                            </div>
                          ))}
                          {filteredReviews[currentReview].images && 
                           filteredReviews[currentReview].images.length > 3 && (
                            <div className="w-20 h-20 rounded-lg bg-gray-100 flex items-center justify-center text-xs">
                              +{filteredReviews[currentReview].images.length - 3}
                            </div>
                          )}
                        </div>
                      )}

                      {/* Actions */}
                      <div className="flex items-center gap-4">
                        <Button variant="ghost" size="sm">
                          <ThumbsUp className="h-4 w-4 mr-1" />
                          H·ªØu √≠ch ({filteredReviews[currentReview].helpful})
                        </Button>
                        <Button variant="ghost" size="sm">
                          <MessageSquare className="h-4 w-4 mr-1" />
                          Ph·∫£n h·ªìi
                        </Button>
                        <Button variant="ghost" size="sm">
                          <Share2 className="h-4 w-4 mr-1" />
                          Chia s·∫ª
                        </Button>
                      </div>
                    </div>
                  )}
                </CardContent>
              </Card>

              {/* Navigation */}
              {filteredReviews.length > 1 && (
                <>
                  <Button
                    variant="outline"
                    size="sm"
                    className="absolute left-4 top-1/2 transform -translate-y-1/2"
                    onClick={prevReview}
                  >
                    <ChevronLeft className="h-4 w-4" />
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    className="absolute right-4 top-1/2 transform -translate-y-1/2"
                    onClick={nextReview}
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </>
              )}
            </div>

            {/* View All Reviews */}
            <div className="text-center">
              <Button variant="outline" size="lg">
                Xem t·∫•t c·∫£ {reviews.length.toLocaleString()} ƒë√°nh gi√°
                <ChevronRight className="h-4 w-4 ml-2" />
              </Button>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}
